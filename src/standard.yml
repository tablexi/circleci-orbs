description: "A set of standard steps which we use for projects at Table XI"
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.1
commands:
  wait_for_other_builds:
    description: "Ensure no earlier numbered job (of this branch) is running"
    steps:
      - run:
          name: Wait for other builds to finish before running
          command: |
            mkdir -p ~/bin
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -O ~/bin/jq
            wget https://raw.githubusercontent.com/bellkev/circle-lock-test/02d45b47f8bf8e6009aa7fca9e9a7257a77a0404/do-exclusively -O ~/bin/do-exclusively
            chmod +x ~/bin/jq ~/bin/do-exclusively
            export PATH=$PATH:$HOME/bin
            do-exclusively --branch $CIRCLE_BRANCH echo "We have an exclusive lock on the current branch"
  wait_for_db:
    description: "Wait for the database to be ready to accept connections"
    parameters:
      executor:
        type: executor
      mysql_db_type:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.mysql_db_type >>
          steps:
            - run: dockerize -wait tcp://localhost:3306 -timeout 2m
      - unless:
          condition: << parameters.mysql_db_type >>
          steps:
            - run: dockerize -wait tcp://localhost:5432 -timeout 2m
  load_db_schema:
    description: "Create DB and load the database schema, no matter the db type"
    parameters:
      executor:
        type: executor
      mysql_db_type:
        type: boolean
        default: false
    steps:
      - run: sudo apt install -y ca-certificates && sudo apt-get --allow-releaseinfo-change update && sudo apt-get install -y tzdata
      # Install the database library, so that we can run rake db:structure:load
      - when:
          condition: << parameters.mysql_db_type >>
          steps:
            - run: sudo apt-get install -y default-mysql-client libmysqlclient-dev
      - unless:
          condition: << parameters.mysql_db_type >>
          steps:
            - run: sudo apt-get install -y postgresql-client

      - run: bundle exec rake db:create
      - run: if [ -e db/schema.rb ]; then bundle exec rake db:schema:load; fi
      - run: if [ -e db/structure.sql ]; then bundle exec rake db:structure:load; fi
  install_bundler:
    description: "Read the Gemfile.lock and install the appropriate version of bundler"
    parameters:
      executor:
        type: executor
    steps:
      - run:
          name: Install specified bundler version
          command: gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"
  install_phantomjs:
    description: "install phantomjs on the system for use in javascript-enabled specs"
    parameters:
      executor:
        type: executor
    steps:
      # https://www.vultr.com/docs/how-to-install-phantomjs-on-ubuntu-16-04/
      - run: sudo wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
      - run: sudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/
      - run: sudo ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/

jobs:
  check_db_schema:
    description: check to ensure that we can migrate from scratch and end up with the schema.rb
    parameters:
      executor:
        type: executor
      mysql_db_type:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - wait_for_db:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>
      - install_bundler:
          executor: << parameters.executor >>
      - run: bundle exec rake db:drop db:create db:migrate RAILS_ENV=test
      # # check that the schema.rb/structure.sql is the same result
      - run: if [ -e db/schema.rb ]; then git diff --exit-code db/schema.rb; fi
      - run: if [ -e db/structure.sql ]; then git diff --exit-code db/structure.sql; fi

  rubocop:
    description: run the rubocop command
    parameters:
      executor:
        type: executor

    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - install_bundler:
          executor: << parameters.executor >>
      - run: bundle exec rubocop --config .rubocop.yml

  bundle_audit:
    description: run the bundle-audit command
    parameters:
      executor:
        type: executor

    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - install_bundler:
          executor: << parameters.executor >>
      - run: bundle exec bundle-audit update
      # If a .bundlerauditignore file EXISTS and HAS CONTENTS
      # then we read the CVEs from this file and pass them to the bundler-audit command
      # Otherwise, we invoke bundler-audit without --ignore args.
      #
      # Based upno https://github.com/rubysec/ruby-advisory-db/pull/390#issuecomment-509186921
      # and https://github.com/rubysec/bundler-audit/pull/215
      - run: if [ `egrep "^[^#]" .bundlerauditignore | cut -f1 | wc -l` -ne 0 ]; then egrep "^[^#]" .bundlerauditignore | cut -f1 | xargs bundle exec bundle-audit --ignore; else bundle exec bundle-audit; fi

  haml_lint:
    description: run the haml-lint command
    parameters:
      executor:
        type: executor

    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - install_bundler:
          executor: << parameters.executor >>
      - run: bundle exec haml-lint

  rspec:
    description: Run Rspec after waiting for db and loading schema
    parameters:
      executor:
        type: executor
      store_screenshots:
        type: boolean
        default: true
      mysql_db_type:
        type: boolean
        default: false
      parallelism:
        type: integer
        default: 1
      report_coverage:
        type: boolean
        default: false
      install_browsers:
        type: boolean
        default: false
      install_phantomjs:
        type: boolean
        default: false
    executor: << parameters.executor >>
    parallelism: << parameters.parallelism >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - wait_for_db:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>

      - when:
          condition: << parameters.install_browsers >>
          steps:
            - browser-tools/install-browser-tools

      - install_bundler:
          executor: << parameters.executor >>
      # Setup DB in this job, because it cannot be shared through the attach_workspace
      - run: bundle exec rake db:create

      - load_db_schema:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>

      # install phantomjs, optionally
      - when:
          condition: << parameters.install_phantomjs >>
          steps:
            - install_phantomjs:
                executor: << parameters.executor >>
      # Run rspec in parallel
      - run:
          shell: /bin/bash -eo pipefail -O globstar
          name: rspec
          command: |
            bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
      - when:
          condition: << parameters.store_screenshots >>
          steps:
            - store_artifacts:
               path: tmp/screenshots

      - when:
          condition: << parameters.report_coverage >>
          steps:
            - store_artifacts:
               path: coverage/.resultset.json
               prefix: coverage

            - deploy:
                name: Merge and copy coverage data
                command: bundle exec report_coverage --branch develop
  teaspoon:
    description: Run teaspoon after waiting for db and loading schema
    parameters:
      executor:
        type: executor
      mysql_db_type:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp

      - wait_for_db:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>
      - install_bundler:
          executor: << parameters.executor >>
      # Setup DB in this job, because it cannot be shared through the attach_workspace
      - run: bundle exec rake db:create

      - load_db_schema:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>

      - run: mkdir -p ~/teaspoon

      - run:
          command: |
            bundle exec teaspoon \
            --suppress-log \
            --format junit > ~/teaspoon/teaspoon.xml
  check_annotate:
    description: run rake annotate and check for changes
    parameters:
      executor:
        type: executor
      mysql_db_type:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: ~/tmp
      - wait_for_db:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>

      - install_bundler:
          executor: << parameters.executor >>
      # Setup DB in this job, because it cannot be shared through the attach_workspace
      - run: bundle exec rake db:create

      - load_db_schema:
          mysql_db_type: << parameters.mysql_db_type >>
          executor: << parameters.executor >>
      - run: bundle exec annotate
      - run: git diff --exit-code
